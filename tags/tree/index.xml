<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tree on Ting-Hsuan Lin</title>
    <link>https://vivian6f2.github.io/tags/tree/</link>
    <description>Recent content in Tree on Ting-Hsuan Lin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Aug 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://vivian6f2.github.io/tags/tree/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Path Sum</title>
      <link>https://vivian6f2.github.io/blog/path-sum/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://vivian6f2.github.io/blog/path-sum/</guid>
      <description>Path Sum LeetCode #112 
Description Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.
For example:
Given the below binary tree and sum = 22,
 5 / \ 4 8 / / \ 11 13 4 / \ \ 7 2 1  return true, as there exist a root-to-leaf path 5-&amp;gt;4-&amp;gt;11-&amp;gt;2 which sum is 22.</description>
    </item>
    
    <item>
      <title>Path Sum II</title>
      <link>https://vivian6f2.github.io/blog/path-sum-ii/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://vivian6f2.github.io/blog/path-sum-ii/</guid>
      <description>Path Sum II LeetCode #113 
Description Given a binary tree and a sum, find all root-to-leaf paths where each path&amp;rsquo;s sum equals the given sum.
For example:
Given the below binary tree and sum = 22,
 5 / \ 4 8 / / \ 11 13 4 / \ / \ 7 2 5 1  return
[ [5,4,11,2], [5,8,4,5] ]  
My Thoughts It is similar to Path Sum problem.</description>
    </item>
    
    <item>
      <title>Path Sum III</title>
      <link>https://vivian6f2.github.io/blog/path-sum-iii/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://vivian6f2.github.io/blog/path-sum-iii/</guid>
      <description>Path Sum III LeetCode #437 
Description You are given a binary tree in which each node contains an integer value.
Find the number of paths that sum to a given value.
The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).
The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.</description>
    </item>
    
    <item>
      <title>Path Sum IV</title>
      <link>https://vivian6f2.github.io/blog/path-sum-iv/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://vivian6f2.github.io/blog/path-sum-iv/</guid>
      <description>Path Sum IV LeetCode #666 
Description If the depth of a tree is smaller than 5, then this tree can be represented by a list of three-digits integers.
For each integer in this list:
1 The hundreds digit represents the depth D of this node, 1 &amp;lt;= D &amp;lt;= 4. 2 The tens digit represents the position P of this node in the level it belongs to, 1 &amp;lt;= P &amp;lt;= 8.</description>
    </item>
    
    <item>
      <title>Binary Tree Zigzag Level Order Traversal</title>
      <link>https://vivian6f2.github.io/blog/binary-tree-zigzag-level-order-traversal/</link>
      <pubDate>Sat, 26 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://vivian6f2.github.io/blog/binary-tree-zigzag-level-order-traversal/</guid>
      <description>Binary Tree Zigzag Level Order Traversal LeetCode #103 
Description Given a binary tree, return the zigzag level order traversal of its nodes&amp;rsquo; values. (ie, from left to right, then right to left for the next level and alternate between).
For example:
Given binary tree [3,9,20,null,null,15,7],
 3 / \ 9 20 / \ 15 7  return its zigzag level order traversal as:
[ [3], [20,9], [15,7] ]</description>
    </item>
    
    <item>
      <title>Closest Binary Search Tree Value II</title>
      <link>https://vivian6f2.github.io/blog/closest-binary-search-tree-value-ii/</link>
      <pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://vivian6f2.github.io/blog/closest-binary-search-tree-value-ii/</guid>
      <description>Closest Binary Search Tree Value II LeetCode #272 
Description Given a non-empty binary search tree and a target value, find k values in the BST that are closest to the target.
Note:
 Given target value is a floating point. You may assume k is always valid, that is: k â‰¤ total nodes. You are guaranteed to have only one unique set of k values in the BST that are closest to the target.</description>
    </item>
    
  </channel>
</rss>